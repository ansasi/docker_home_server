volumes:
  portainer-data:
    driver: local

networks:
  proxy:
    external: true

services:
# --- Portainer Image
  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data
    networks:
      - proxy
    ports:
      - "9000:9000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.rule=Host(`portainer.sheetgenius.app`)"
      - "traefik.http.routers.portainer.tls=true"
      - "traefik.http.routers.portainer.tls.certresolver=cloudflare"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
    restart: unless-stopped
  
  # watchtower:
  #   image: containrrr/watchtower
  #   container_name: watchtower
  #   environment:
  #     - TZ=Europe/Madrid
  #     # remove old images after update (useful for saving space)
  #     - WATCHTOWER_CLEANUP=true
  #     # remove old volumes after update (useful for saving space)
  #     - WATCHTOWER_REMOVE_VOLUMES=true
  #     # the below will ignore labels set. It is worth checking out labels as that can be a more scalabe solution (automatic)
  #     # - WATCHTOWER_DISABLE_CONTAINERS=traefik authentik bouncer-traefik
  #     # Run at 4am every day (instead of the default of 24 hours)
  #     - WATCHTOWER_SCHEDULE=0 0 4 * * *
  #     # how frequently to check for images (default is 24 hours)
  #     # - WATCHTOWER_POLL_INTERVAL=86400
  #     # choose whether to restart the containers after updates
  #     # - WATCHTOWER_INCLUDE_RESTARTING=true
  #     # you can tell watchtower to do updates and restarts one by one - can be helpful
  #     - WATCHTOWER_ROLLING_RESTART=true

  #     # watchtower can behave like DIUN by only notifying, and not updating
  #     # - WATCHTOWER_MONITOR_ONLY=true
  #     # # Monitoring
  #     # - WATCHTOWER_HTTP_API_METRICS=true
  #     # - WATCHTOWER_HTTP_API_TOKEN=${WATCHTOWER_HTTP_API_TOKEN}
  #     # - WATCHTOWER_HTTP_API_PERIODIC_POLLS=true
  #   # env_file:
  #   #   - .env
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   networks:
  #     - management
  #   restart: unless-stopped
